[{"categories":["knowledge-base"],"contents":"Note: If you haven’t read it yet, perhaps check out my post Things to know before starting Game Boy development first before starting this post.\nWriting assembly code for the Game Boy isn’t as hard as it first may seem. Unsurprisingly, the CPU for the Game Boy is incredibly simple. Here are some basic things that you need to know before getting stuck into it.\n1 – Devices are Memory-Mapped Input and output are all fairly straight forward since they are memory-mapped. In short, this means that you interface with devices by reading/writing memory. Want to make a beep sound? Write a value to where the sound data is mapped. Want to read if a button is being pressed? Read a value from where the input data is mapped. The benefit of this is that once you have learnt how to read and write memory you don’t need to learn a different set of instructions for doing I/O operations.\n2 – If you’re not familiar with what a Register is, you will be For those of you who don’t know, Registers are generally the fastest memory available to a CPU and are stored within the processor itself. They are important because you can’t do operations directly on values that are in RAM or saved with your ROM. If you want to add two numbers together that are in RAM, then you will need to load them into registers and then do your operation.\nOn top of this there are also a few special registers, the most note-worthy of these is one that stores different flags about your last operation. Want to know if the last math operation overflowed? Want to know if the last math operation resulted in 0? Well flags for that are stored in this register.\n3 – Interrupts are also important Processors have an inbuilt mechanism for basic event-driven architecture called Interrupts. You can set flags so that when pre-specified events occur, the current CPU task is interrupted and code specific to that event is executed. There are 5 different interrupts available to you but you are probably going to dealing mostly with the V-Blank one.\n4 – You may be the sheriff of this wild west, but there are rules you still need to follow Just because you control the CPU, it doesn’t mean that you can do whatever you want. As an example, one of the restrictions you will need to work with is that you cannot write to the video memory while the LCD is writing to the screen. For the most part you will be updating the LCD during it’s V-Blank phase, which thanks to the V-Blank interrupt is pretty easy to manage.\n","permalink":"https://njit.io/kb/development/gameboy/cpu-basics/","summary":"Writing assembly code for the Game Boy isn’t as hard as it first may seem. Here are some basic things that you need to know before getting stuck into it.","tags":["development","gameboy"],"title":"Game Boy CPU basics","topic":"Gameboy"},{"categories":["knowledge-base"],"contents":"Interested in Game Boy development but want to get a bit of an idea what’s involved first? Here’s a quick list of things I think are useful to know.\n1 – You’ll be writing code in CPU assembly While there is stuff like GB Studio I’m going to assume you’re here because you’ve already decided you don’t want to do that and are keen to program for the hardware. If that is the case then you’re probably going to be writing assembly code for the CPU. Writing something in C then compiling to the architecture is possible but since the CPU is only 4.19 MHz and has very limited memory the extra control of assembly will have its advantages. Don’t worry, since the CPU is very basic there’s not too much to learn.\n2 – The CPU is a custom chip with some quirks (by modern day standards) When looking more into the CPU online you’ll find a lot of people saying that it’s a Z80 but not quite (the Zilog Z80 being quite a prolific chip in the 80’s, used in things like the ZX Spectrum and Sega Master System). While you should be aware that the CPU has a couple of bugs, the first thing you’re going to encounter is that the CPU only deals in whole numbers and doesn’t have instructions for multiplying or dividing numbers. Math is really basic on this device and you’re going to need to think (or Google) outside the box to do more complex things.\n3 – You can still write assembly for this with modern source code editors It’s not all “living in the dark ages” when developing for the Game Boy, I know at a minimum both Visual Studio Code and Sublime Text have plugins for syntax highlighting Game Boy assembly. Hell, this plugin for Visual Studio Code has code completion with documented instruction snippets.\n4 – It’s not too difficult to get your code onto real hardware The homebrew scene has made this process fairly simple. Personally I use a Gameboy LinkNLoad32 USB Flash Cart from InsideGadgets which is a cart with a USB-C port for transferring data onto it using software like FlashGBX.\nWhat next? Check out my next post Game Boy CPU basics.\n","permalink":"https://njit.io/kb/development/gameboy/things-to-know-before-starting/","summary":"Interested in Game Boy development but want to get a bit of an idea what’s involved first? Here’s a quick list of things I think are useful to know.","tags":["development","gameboy"],"title":"Things to know before starting Game Boy development","topic":"Gameboy"},{"categories":["knowledge-base"],"contents":"Some simple registry hacks for alterating the Windows 11 UI.\nDisable new Right-click context menu reg.exe add \u0026#34;HKCU\\Software\\Classes\\CLSID{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\\InprocServer32\u0026#34; /f /ve Disable new Explorer command bar layout reg.exe add \u0026#34;HKCU\\Software\\Classes\\CLSID{d93ed569-3b3e-4bff-8355-3c44f6a52bb5}\\InprocServer32\u0026#34; /f /ve Note: Restarting your users Explorer.exe process is required for the changes to take effect (or you can restart the computer if you prefer).\n","permalink":"https://njit.io/kb/os/windows/windows-11-ui-registry-hacks/","summary":"Some simple registry hacks for alterating the Windows 11 UI.","tags":["os","windows"],"title":"Windows 11 UI registry hacks","topic":"Windows"},{"categories":["knowledge-base"],"contents":"For work I occasionally need to do bandwidth testing, which my go-to tool for is Iperf3. As I work for a company that is Windows focused I generally need to do my testing from Windows computers. Generally when need to do a test I would download Iperf Windows binaries from https://iperf.fr/iperf-download.php. Recently though, I stumbled upon an issue where when testing from a Windows client to a Linux server my test wouldn’t run.\nMy error on the Linux server\nMy error on the Windows client\nLooking into it I noticed a large version difference, my Windows device was running version 3.1 but my Linux device was running 3.12. Going back to the download page (pictured below) I noticed the version on that site hadn’t been updated since 2016.\nAs you can see it has been at least a minute since they updated this\nInspecting the existing binaries from that site I had I could see that it was compiled using Cygwin. As the Iperf3 GitHug page clearly states that there are no dependencies for compiling this software I figured “surely I can just start compiling it myself” which after some trial and error I eventually did. In an effort to share the knowledge here is my guide so that you can too (or maybe apply this to compiling other Linux software for Windows).\nPart 1: Install and configure Cygwin After you’ve downloaded the software from the Cygwin project page it’s a fairly standard install (I assume for someone willing to take on this guide). There is a page asking which packages you wish to install, the only changes you need to make from the default is to add the wget package. We do need to get other packages but we’re going to do that “the easy way” soon.\nAdding wget should look a little like this, you can search for wget and then need to make sure the New column has whatever the latest version number is\nWith that installed you should have a shortcut in your start menu for Cygwin’s terminal. I found it worked best when I forced it to Run as Administrator so I would recommend doing that too.\nAs mentioned above we’re going to do package management the easy way which happens to be this project https://github.com/transcode-open/apt-cyg. The installation process is pretty straight forward:\nwget https://raw.githubusercontent.com/transcode-open/apt-cyg/master/apt-cyg install apt-cyg /bin With that done we can use apt-cyg to download and install all the packages we want. So let’s install our development tools\napt-cyg install git nano make cmake extra-cmake-modules automake autoconf gcc-core gcc-g++ gdb binutils cygwin-devel w32api-headers w32api-runtime libguile3.0_1 libisl23 libmpc3 libgc1 Now it’s worth noting that not all of the above packages are required for compiling Iperf. It’s more of a generic development environment with a couple of specific requirements added in.\nPart 2: Cloning the repo. building Iperf3 and getting the binary to work With all of the above done correctly this part is fairly simple.\nClone the git repo from https://github.com/esnet/iperf\ngit clone https://github.com/esnet/iperf.git Change directory into the repo\ncd iperf Follow the build instructions from README.md\n./configure; make; make install If your build was successful you should be able to run:\nwhich iperf3 …and you will see something like this\nNow this doesn’t mean that our binary is immediately usable, we first need to check which libraries it links to. So run:\ncygcheck iperf3 Which should give you something like\nWhat we are on the look out for here are any DLLs which are in our Cygwin directory. Looking at the above you can see we need cygwin1.dll from the bin folder. So all we need to do is copy that DLL into the folder where the EXE was found.\nNext if you open that directory in CMD you should be able to run the following successfully:\niperf3 -v The result should look like this:\nThat’s it, copy that EXE and DLL together to any other Windows machines (of compatible architecture) and you should be right to go.\nPart 3: Troubleshooting tips Ok, so this all looks easy enough but when I fail to update this guide in the future then you may need to do some troubleshooting. Now here are some quick tips:\nTip 1: cygcheck is your friend If you are having issues getting an application that you downloaded using apt-cyg to run start by using cygcheck to detect what dependencies are missing. As an example I was having issues with make so I ran:\ncygcheck make And would you look at that we’re missing a dependency:\nWe need to find cygguile-3.0-1.dll\nIf you feel so inclined you can do this the GCC way and use ldd instead\nOooh, look at that… It’s the same thing but with slightly less cygwin-aware information\nTip 2: apt-cyg has a pretty useful search function Continuing our above example, let’s say you need to find cygguile-3.0-1.dll how would you do that? Try the following seach\napt-cyg searchall cygguile-3.0-1 And if you look at that it lists a package named libguile3.0_1 which you may recognise as one of the packages we installed at the end of Part 1.\nTip 3: simple hello app for testing that we can compile If you wanna test that you can compile C apps, here is a quick “hello” app written in C which for the sake of this tip will be named: hello.c\n#include \u0026lt;stdio.h\u0026gt; int main() { printf(\u0026#34;Hello from C\\n\u0026#34;); return 0; } To compile it run:\ngcc hello.c -o hello.exe …then if you get no errors and hello.exe exists you should be able to run:\n./hello.exe …which should look like this:\nRight, but what should a problem look like? Well as an example I ran into the following issue:\nThese errors are basically saying that we’re missing the advapi32, shell32, user32 and kernel32 libraries for linking. To resolve this we can go back to tip 2, so pick a library and do a search\nInterestingly this search came up with 3 packages. A little bit of trial and error later I discovered w32api-runtime was the package to install which you may recognise as one of the packages we installed at the end of Part 1.\nIf seems like it requires a little too much effort? No problem, this isn’t for everyone. If you like instead you can go to my GitHub repo https://github.com/nathancrjackson/iperf3-windows-builds and download pre-compiled versions built by me.\n","permalink":"https://njit.io/kb/os/windows/how-to-compile-iperf3-for-windows-using-cygwin/","summary":"How to use Cygwin to compile Iperf3 for Windows.","tags":["os","windows","iperf3"],"title":"How to compile Iperf3 for Windows using Cygwin","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Common entries Some common entries (grouped by category) are:\nLogon Keyword Event ID Description Audit Success 4624 An account was successfully logged on Audit Failure 4625 An account failed to log on Audit Success 4648 A logon was attempted using explicit credentials Logoff Keyword Event ID Description Audit Success 4634 An account was logged off User Account Management Keyword Event ID Description Audit Success 4722 A user account was enabled Audit Success 4723 An attempt was made to change an account’s password Audit Success 4725 A user account was disabled Audit Success 4738 A user account was changed Audit Success 4740 A user account was locked out The User Account Management category should only be present on domain controllers\nUseful custom query A useful custom query that can’t be achieved simply through a filter is:\nGet logon and logoff events for a specific user \u0026lt;QueryList\u0026gt; \u0026lt;Query Id=\u0026#34;0\u0026#34; Path=\u0026#34;Security\u0026#34;\u0026gt; \u0026lt;Select Path=\u0026#34;Security\u0026#34;\u0026gt; *[ EventData[Data[@Name=\u0026#39;TargetUserName\u0026#39;]=\u0026#39;{:Username:}\u0026#39;] and System[ (EventID \u0026amp;gt;= 4620 and EventID \u0026amp;lt;= 4639) ] ] \u0026lt;/Select\u0026gt; \u0026lt;/Query\u0026gt; \u0026lt;/QueryList\u0026gt; ","permalink":"https://njit.io/kb/os/windows/security-events/","summary":"Some useful Windows event IDs to know when auditing security logs.","tags":["os","windows"],"title":"Windows Security Events","topic":"Windows"},{"categories":["knowledge-base"],"contents":"How to repair or rebuild the WMI repository in Windows via CMD\nRepairing the repository Run the following commands in CMD\nDisable the WMI service sc config winmgmt start= disabled Stop the WMI service net stop winmgmt Salvage and reset the repository winmgmt /salvagerepository C:\\WINDOWS\\System32\\wbem winmgmt /resetrepository C:\\WINDOWS\\System32\\wbem Re-enable the WMI service sc config winmgmt start= auto Restart Windows shutdown /f /r /t 0 Rebuilding the repository Run the following commands in CMD\nDisable the WMI service sc config winmgmt start= disabled Stop the WMI service net stop winmgmt Rename the existing repository rename \u0026#34;%WINDIR%\\system32\\wbem\\repository\u0026#34; \u0026#34;repository.bkup\u0026#34; Re-enable the WMI service sc config winmgmt start= auto Restart Windows shutdown /f /r /t 0 Delete repository backup if no issues (optional) rmdir /S /Q \u0026#34;%WINDIR%\\system32\\wbem\\repository.bkup\u0026#34; ","permalink":"https://njit.io/kb/os/windows/repairing-and-rebuild-wmi-repository/","summary":"Many services rely on WMI to work. When it doesn't work you can try to repair/rebuild it.","tags":["os","windows"],"title":"Repairing and rebuild WMI repository","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Considerations before you begin This guide has only been tested working on AMD64 architecture. I have had issues trying to do this on ARM based devices as particular packages have been missing from the software repos for that architecture. I may look into work-arounds in the future or the issue may resolve itself over time.\nAlso Guacamole relies on Tomcat which may complicate things if you are already running:\nTomcat for another webapp A different web server that uses 8080 Personally I run Guacamole in its own LXD container.\nBasic Setup For convenience start by switching to your root user\nsudo su Because we need to install packages it is recommended that you update your repos first\napt update In this I use nano for file editing. If you’re doing this in a fresh container and don’t want to use vi you’ll probably want to run\napt install nano -y Compiling and configuring Guacamole Server As we are going to be compiling the Guacamole server daemon from source we need to install the prerequisites\napt install build-essential wget libcairo2-dev libjpeg-turbo8-dev libpng-dev libtool-bin libossp-uuid-dev libvncserver-dev freerdp2-dev libssh2-1-dev libtelnet-dev libwebsockets-dev libpulse-dev libvorbis-dev libwebp-dev libssl-dev libpango1.0-dev libswscale-dev libavcodec-dev libavutil-dev libavformat-dev -y For reference here is the Guacamole page that I got these from: https://guacamole.apache.org/doc/gug/installing-guacamole.html\nYou may want to reference it if:\nYou want to be be more selective because you only need certain features If you want to try to adapt this guide for a RHEL based distro and need their package names You’re using this in a future where I’ve forgotten about this article and have not updated packages as they change over time Change to your working directory that you want to download and extract into\ncd \u0026#34;{:WorkingDirectory:}\u0026#34; Download the Guacamole server source\nwget https://{:ApacheCDN:}/guacamole/{:GuacamoleVersion:}/source/guacamole-server-{:GuacamoleVersion:}.tar.gz -O \u0026#34;{:WorkingDirectory:}/guacamole-server-{:GuacamoleVersion:}.tar.gz\u0026#34; Extract the source\ntar -xvf guacamole-server-{:GuacamoleVersion:}.tar.gz Change into the extracted directory\ncd guacamole-server-{:GuacamoleVersion:} Configure, make, install and link libraries\n./configure --with-systemd-dir=/etc/systemd/system/ With Guacamole 1.4.0 on Ubuntu 22.04 I had an issue with my build failing because Guacamole was using depreciated functions. To get around “all warnings being treated as errors” during make run this instead\n./configure --with-systemd-dir=/etc/systemd/system/ CFLAGS=-Wno-error Now make, install and link libraries\nmake make install ldconfig Before we start the service we need to create our Guacamole config folder\nmkdir -p /etc/guacamole Then create our Guacamole daemon config file\nnano /etc/guacamole/guacd.conf Populate the file with the following:\n[server] bind_host = 127.0.0.1 bind_port = 4822 There are not many options but for reference if you would like to know them they can be found here: https://guacamole.apache.org/doc/gug/configuring-guacamole.html#configuring-guacd\nReload services then enable and start the Guacamole Server\nsystemctl daemon-reload systemctl enable guacd systemctl start guacd That is it for the server installation, you can check it is working by running\nsystemctl status guacd Configuring Guacamole Client Apache provide the Guacamole Client webapp pre-compiled so we only need to download the Tomcat platform that hosts it\napt install tomcat9 tomcat9-admin tomcat9-common tomcat9-user -y Then download the pre-compiled webapp\nwget https://{:ApacheCDN:}/guacamole/{:GuacamoleVersion:}/binary/guacamole-{:GuacamoleVersion:}.war -O \u0026#34;{:WorkingDirectory:}/guacamole-{:GuacamoleVersion:}.war\u0026#34; And copy it into Tomcat’s webapp folder\ncp \u0026#34;{:WorkingDirectory:}/guacamole-{:GuacamoleVersion:}.war\u0026#34; /var/lib/tomcat9/webapps/guacamole.war Then we can create our main Guacamole config file for the webapp\nnano /etc/guacamole/guacamole.properties Populate the file with the following:\n#Guacamole server daemon details guacd-hostname: 127.0.0.1 guacd-port: 4822 #Guacamole client webapp configuration auth-provider: net.sourceforge.guacamole.net.basic.BasicFileAuthenticationProvider basic-user-mapping: /etc/guacamole/user-mapping.xml Next we will need to create the basic user mapping file\nnano /etc/guacamole/user-mapping.xml Here is an example which has a user that connects to RDP:\n\u0026lt;user-mapping\u0026gt; \u0026lt;authorize username=\u0026#34;{:GuacUsername:}\u0026#34; password=\u0026#34;{:GuacPWDMD5:}\u0026#34; encoding=\u0026#34;md5\u0026#34;\u0026gt; \u0026lt;connection name=\u0026#34;{:ConnectionName:}\u0026#34;\u0026gt; \u0026lt;protocol\u0026gt;rdp\u0026lt;/protocol\u0026gt; \u0026lt;param name=\u0026#34;hostname\u0026#34;\u0026gt;{:RDPHostname:}\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;domain\u0026#34;\u0026gt;{:RDPUserDomain:}\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;username\u0026#34;\u0026gt;{:RDPUsername:}\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;password\u0026#34;\u0026gt;{:RDPUserPassword:}\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;ignore-cert\u0026#34;\u0026gt;true\u0026lt;/param\u0026gt; \u0026lt;param name=\u0026#34;resize-method\u0026#34;\u0026gt;display-update\u0026lt;/param\u0026gt; \u0026lt;/connection\u0026gt; \u0026lt;/authorize\u0026gt; \u0026lt;/user-mapping\u0026gt; To learn more about the options available please read: https://guacamole.apache.org/doc/gug/configuring-guacamole.html\nI would recommend not skipping over the section on parameter tokens as they are useful for doing things like passing the Guacamole user’s password into the RDP connection’s password.\nAs you may have noticed the Guacamole user password is an MD5 hash. If you don’t want to use my website to do the hash for you (I assume because you can’t be bothered inspecting the code to make sure it’s safe) you can also run the following command to generate the hash for you (provided that you have openssl installed).\necho -n \u0026#34;{:GuacPWD:}\u0026#34; | openssl md5 Please note that this will instead save the password into your command history unless you run something like this afterwards: kill -9 $$\nWith all that complete all you need to do now is restart the Tomcat service and you are good to go\nsystemctl restart tomcat9 You should now be able to access and use Guacamole via: http://{:GuacamoleServerIP:}:8080/guacamole/\nNGINX reverse proxy If you have NGINX configured as a reverse proxy you can add the following location to your server block to reverse proxy Guacamole (I’m going to assume that you know what I mean by this):\nlocation /guacamole/ { proxy_pass http://{:GuacamoleServerIP:}:8080/guacamole/; proxy_buffering off; proxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; } If you would like to rename the location alias you can do so with the following changes:\nlocation /{:LocationAlias:}/ { proxy_pass http://{:GuacamoleServerIP:}:8080/guacamole/; proxy_buffering off; proxy_http_version 1.1; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $http_connection; proxy_cookie_path /guacamole/ /{:LocationAlias:}/; } Then restart your NGINX service and you are good to go\nsystemctl restart nginx ","permalink":"https://njit.io/kb/os/linux/ubuntu/installing-guacamole-in-ubuntu/","summary":"How to install Apache Guacamole on an Ubuntu server","tags":["os","linux","ubuntu","apache guacamole"],"title":"Installing Apache Guacamole in Ubuntu","topic":"Apache Guacamole"},{"categories":["knowledge-base"],"contents":"Run the following command as administrator\nDISM /Online /Enable-Feature /All /FeatureName:NetFX3 /Source:{:MediaDriveLetter:}:\\sources\\sxs /LimitAccess ","permalink":"https://njit.io/kb/os/windows/installing-net-2-and-3-5-feature-from-installation-media/","summary":"In the case of having to install legacy .NET versions but the Windows Feature GUI is throwing an error try this.","tags":["os","windows"],"title":"Installing .NET 2 \u0026 3.5 feature from Windows installation media","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Useful commands List available image servers lxc remote list List images on server lxc image list {:ImageServerName:}: Search for images lxc image list {:ImageServerName:}: {:SearchTerm:} How I like to search because I feel it yields more comprehensive results lxc image list {:ImageServerName:}: | grep -i \u0026#39;{:SearchTerm:}\u0026#39; Create a container based on alias or thumbprint lxc launch {:ImageServerName:}:{:ImageAliasOrThumbprint:} {:ContainerName:} Standard start/stop/restart/delete operations lxc {:StandardOperation:} {:ContainerName:} Display container information lxc info {:ContainerName:} Take snapshot of container lxc snapshot {:ContainerName:} {:SnapshotName:} Restore snapshot of container lxc restore {:ContainerName:} {:SnapshotName:} Delete snapshot of container lxc delete {:ContainerName:}/{:SnapshotName:} List container profiles lxc profile list Show container profile details lxc profile show {:ProfileName:} Assign profile to container lxc profile assign {:ContainerName:} {:ProfileName:} Show container configuration lxc config show {:ContainerName:} Set configuration option for container lxc config set {:ContainerName:} {:ConfigOption:} \u0026#34;{:ConfigValue:}\u0026#34; List devices added to container lxc config device list {:ContainerName:} Show details for devices added to container lxc config device show {:ContainerName:} Add storage device to container lxc config device add {:ContainerName:} {:DeviceName:} disk \u0026#34;source={:LocalSourceFolder:}\u0026#34; \u0026#34;path={:ContainerMountPath:}\u0026#34; Remove device from container lxc config device remove {:ContainerName:} {:DeviceName:} ","permalink":"https://njit.io/kb/containers/lxc/command-cheat-sheet/","summary":"Cheat-sheet for the lxc command used to manage LXC containers","tags":["containers","lxc"],"title":"LXC commands cheat-sheet","topic":"LXC"},{"categories":["knowledge-base"],"contents":"It’s probably installed by default but if not most distribution’s package managers refer to it as logrotate so installing it is pretty straight forward\napt install logrotate dnf install logrotate pacman -S logrotate The main configuration file is:\n/etc/logrotate.conf With (by default) additional configuration files being loaded from the directory:\n/etc/logrotate.d Command to debug configuration file\nlogrotate -d \u0026#34;{:PathToConfigFile:}\u0026#34; Command to force run configuration file in verbose mode\nlogrotate -vf \u0026#34;{:PathToConfigFile:}\u0026#34; The following is an example configuration for rotating one log file:\n/var/log/{:AppName:}.log { missingok compress notifempty copytruncate } The following is an example configuration for rotating logs file using a wildcard:\n/var/log/{:AppName:}/* { rotate 30 daily missingok olddir \u0026#34;/var/log/{:AppName:}/archive\u0026#34; dateext compress } Common configuration options The following are some common configuration options\nOption Description rotate {:NumberToKeep:} Keep {:NumberToKeep:} amount of rotated logs daily / weekly / monthly Rotate logs regularly size {:Size:} Rotate logs when they hit {:Size:} in bytes. Can be set as (kilo/mega/giga)bytes with k/M/G missingok Do not error if log file doesn’t exist olddir “{:DirectoryPath:}” Places rotated logs into {:DirectoryPath:} dateext Use date extension in YYYYMMDD format (e.g: 20380120) instead of number format notifempty Do not rotate if log is empty compress /nocompress Compress or not do compress rotated log files delaycompress When using compress will delay compression of the log being rotated until the following rotation copytruncate Do not delete existing log file, copy file for rotation and truncate contents of existing file create {:Mode:} {:Owner:} {:Group:} Specify the permissions octal, owner and group when creating a new log file createolddir {:Mode:} {:Owner:} {:Group:} Create the old directory if it does not exist and set the permissions octal, owner and group to those specified ","permalink":"https://njit.io/kb/os/linux/logrotate-cheat-sheet/","summary":"The following is a cheat-sheet for the logrotate Linux command-line utility","tags":["os","linux"],"title":"Logrotate cheat-sheet","topic":"Linux"},{"categories":["knowledge-base"],"contents":"Sync target with source (will delete files in target)\nrobocopy \u0026#34;{:Source:}\u0026#34; \u0026#34;{:Target:}\u0026#34; /mir /copy:{:CopyFlags:} /r:{:RetryCount:} /w:{:WaitTime:} Sync target with source (will delete files in target) and log the results\nrobocopy \u0026#34;{:Source:}\u0026#34; \u0026#34;{:Target:}\u0026#34; /mir /copy:{:CopyFlags:} /r:{:RetryCount:} /w:{:WaitTime:} /tee /np \u0026#34;/{:LoggingMode:}:{:LogFileFullPath:}\u0026#34; Common configuration switches Switch Description /S Copy subdirectories /E Copy subdirectories (including empty ones) /MIR Mirror directory tree (delete files/folders from target that no longer exist in source) /Z Copy files in restartable mode /ZB Copy files in restartable mode but fail back to backup mode if access denied /R:{:RetryCount:} Retry {:RetryCount:} times (default is 1000000) /W:{:WaitTime:} Wait {:WaitTime:} seconds between retries (default is 30 seconds) /TBD Wait for share names to be defined (for retry error 67) /NP No progress to be displayed for file copies /V Verbose output (including skipped files) /TEE Output to console as well as output as well as log file /XF “{:ExcludeFiles:}” Exclude files matching {:ExcludeFiles:} (can use * wildcard) /XD “{:ExcludeDirs:}” Exclude directories matching {:ExcludeDirs:} (can use * wildcard) /LOG:{:LogFileFullPath:} Output results to log file (be sure to properly escape whitespace when using this) /LOG+:{:LogFileFullPath:} Append results to log file (be sure to properly escape whitespace when using this) /UNILOG:{:LogFileFullPath:} Output results to log file (be sure to properly escape whitespace when using this) /UNILOG+:{:LogFileFullPath:} Append results to log file (be sure to properly escape whitespace when using this) For a more complete reference I recommend: https://ss64.com/nt/robocopy.html\nRegex search for errors in output log If you would like to search your output log for errors I have used the below regex (tested in Notepad++):\nERROR \\d+ \\(0x\\d+\\) Unicode file notes When using Unicode logging on some older systems the output file may appear to be gibberish. The PoweShell fix I have used for this (source here) is:\n$bytes = [System.IO.File]::ReadAllBytes(\u0026#39;C:\\Temp\\RoboCopy.log\u0026#39;) $len = $bytes.Length $text = [System.Text.Encoding]::ASCII.GetString($bytes,2,$len -2) $text | Out-File -FilePath \u0026#39;C:\\Temp\\RoboCopyFixed.log\u0026#39; ","permalink":"https://njit.io/kb/os/windows/robocopy-examples/","summary":"In the case of having to install legacy .NET versions but the Windows Feature GUI is throwing an error try this.","tags":["os","windows","robocopy"],"title":"Robocopy examples","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Tested with Ubuntu 20.04 using guestmount 1.40.2\nInstall libguestfs-tools\nsudo apt install libguestfs-tools Mount VMDK file\nguestmount -a \u0026#34;{:VMDKPath:}\u0026#34; -i --ro \u0026#34;{:MountPoint:}\u0026#34; Troubleshooting libguestfs: error: /usr/bin/supermin exited with error status 1 If you’re having trouble mounting a VMDK file without superuser privileges try running (credit to here) but please be aware I do not completely understand the consequences of running that command.\nsudo chmod +r /boot/vmlinuz-* ","permalink":"https://njit.io/kb/virtualisation/vmware/mounting-vmdk-files-read-only-in-ubuntu/","summary":"How to mount a VMDK file in an Ubuntu shell.","tags":["virtualisation","vmware","esxi","ubuntu","linux"],"title":"Mounting VMDK files (read-only) in Ubuntu","topic":"VMware"},{"categories":["knowledge-base"],"contents":"1 - Put the host into maintenance mode Log into a Nutanix CVM and put the host into maintenance mode using acli using the following command:\nacli host.enter_maintenance_mode {:HostIP:} wait=true You can double-check if your host is in maintenance mode by running\nacli host.list If your host has Schedulable set to false then you are good to go.\n2 - Shutdown/reboot host Log onto the host and use your standard linux commands\nShutdown: shutdown -h now Reboot: shutdown -r now 3 - Take host out of maintenance mode Log into a Nutanix CVM and run the following acli command\nacli host.exit_maintenance_mode {:HostIP:} ","permalink":"https://njit.io/kb/hci/nutanix/ahv-host-manual-shutdown-reboot/","summary":"The procedure for shutting down or rebooting a host in a Nutanix cluster.","tags":["hci","nutanix"],"title":"Nutanix AHV host manual shutdown/reboot procedure","topic":"Nutanix"},{"categories":["knowledge-base"],"contents":"The steps for renaming a Nutanix AHV host and its associated CVM are as follows.\n1 - Put host into maintenance mode Log into a CVM and put the host into maintenance mode using acli using the following command:\nacli host.enter_maintenance_mode {:HostIP:} wait=true You can double-check if your host is in maintenance mode by running\nacli host.list If your host has Schedulable set to false then you are good to go.\n2 - Change the name of an AHV host You can update the name of an AHV host by simply updating the following files using your text editor of choice (personally I use nano)\n/etc/sysconfig/network /etc/hostname /etc/hosts Once you are done reboot the host for the change to take affect.\n3 - Change the name of a Controller VM To change the hostname of a CVM (how it is referenced on your network) log into its command line and run the following command:\nsudo /usr/local/nutanix/cluster/bin/change_cvm_hostname {:NewCVMHostname:} Please note: As per this health check your new hostname must start with “NTNX-” and end with “-CVM”\nTo change how the CVM shows up in Prism to match the new hostname you must change the VM name on the AHV host.\nWhile logged into the CVM shut it down:\ncvm_shutdown -h now Next log into the AHV host and confirm the current CVM name by listing the VMs on that host:\nvirsh list --all If you see your Controller VM in the list then you are good to rename it with the following command:\nvirsh domrename {:OldVMName:} {:NewCVMHostname:} Next you will want to re-enable autostart for the VM:\nvirsh autostart {:NewCVMHostname:} Then you can start the CVM back up:\nvirsh start {:NewCVMHostname:} 4 - Take host out of maintenance mode Log into a Nutanix CVM and run the following acli command:\nacli host.exit_maintenance_mode {:HostIP:} ","permalink":"https://njit.io/kb/hci/nutanix/renaming-ahv-host-and-cvm/","summary":"A quick guide on how to rename a host and its CVM","tags":["hci","nutanix"],"title":"Renaming Nutanix AHV host and Controller VM","topic":"Nutanix"},{"categories":["knowledge-base"],"contents":"How to create a single-node or multiple-node cluster from inside a Nutanix Controller VM, complete some initial configuration and if you like destroy the cluster once done.\nHow to create a single-node cluster Log into the CVM via SSH and run\ncluster -s {:CVMIP:} --redundancy_factor=1 create The single-node should automatically start once it is complete.\nHow to create a multiple-node cluster Log into a CVM via SSH and run\ncluster -s {:CVMIPs:} create CVM IPs need to be comma-separated, use the “fill in variables” tool to see this in action.\nA minimum of three nodes is required here. Setting up a two node cluster with witness VM is not covered in the kb.\nThe multiple-node should automatically start once it is complete\nInitial config for cluster Set your cluster name. It can only contain alphanumeric characters, dots, hyphens and underscores (Please note: no spaces).\nncli cluster edit-params new-name=\u0026#34;{:ClusterName:}\u0026#34; Add your DNS server\nncli cluster add-to-name-servers servers=\u0026#34;{:DNSIP:}\u0026#34; You can check your DNS servers with\nncli cluster get-name-servers Set the timezone your cluster is in (see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for timezone list)\nncli cluster set-timezone timezone=\u0026#34;{:TZName:}\u0026#34; You can check your current timezone with\nncli cluster info | grep Timezone Add your NTP server\nncli cluster add-to-ntp-servers servers=\u0026#34;{:NTPServer:}\u0026#34; You can check your NTP servers with\nncli cluster get-ntp-servers For a multiple-node cluster you need to set your virtual IP address for the cluster\nncli cluster set-external-ip-address external-ip-address=\u0026#34;{:ClusterIP:}\u0026#34; How to destroy a cluster Please note: This will delete all guest VM data in the cluster\nLog into a CVM via SSH and stop the cluster\ncluster stop Next once all CVM’s show that the cluster has stopped run\ncluster destroy ","permalink":"https://njit.io/kb/hci/nutanix/create-and-destroy-cluster-from-cvm/","summary":"How to create a single-node or multiple-node cluster from inside a Nutanix Controller VM, complete some initial configuration and if you like destroy the cluster once done.","tags":["hci","nutanix"],"title":"How to create and destroy a cluster from Nutanix CVM","topic":"Nutanix"},{"categories":["knowledge-base"],"contents":" Target Username Password Prism Element web console admin Nutanix/4u Prism Central web console admin Nutanix/4u Acropolis host SSH or console root nutanix/4u CVM SSH nutanix nutanix/4u Prism Central VM SSH nutanix nutanix/4u Please note: Web console passwords are required to be changed on login\n","permalink":"https://njit.io/kb/hci/nutanix/default-credentials/","summary":"Default credentials for various Nutanix components","tags":["hci","nutanix"],"title":"Nutanix default credentials","topic":"Nutanix"},{"categories":["knowledge-base"],"contents":"Whether you call them services or daemons, in systemd the background processes you want running on your Linux installation are wrapped up as units. Unit files for services are stored in the folder /etc/systemd/system with the extention .service\nUseful commands List unit files of services systemctl list-unit-files --type=service List unit files of services matching search (wildcard is *) systemctl list-unit-files --type=service \u0026#34;{:SearchQuery:}\u0026#34; Get unit status systemctl status {:UnitName:} Start/stop/restart unit systemctl start {:UnitName:} systemctl stop {:UnitName:} systemctl restart {:UnitName:} Enable/disable unit systemctl enable {:UnitName:} systemctl disable {:UnitName:} Get if unit enabled/disabled (exit code 0 for enabled and 1 for disabled) systemctl is-enabled {:UnitName:} List unit file contents systemctl cat {:UnitName:} Edit unit default file systemctl edit --full {:UnitName:} Edit unit override file systemctl edit {:UnitName:} Create new service systemctl edit --full --force {:UnitName:}.service Reloading systemd after making changes outside of systemctl (i.e. deleting a service) systemctl daemon-reload ","permalink":"https://njit.io/kb/os/linux/services-in-systemd/","summary":"A brief overview of working with service units in systemd.","tags":["os","linux","systemd"],"title":"Services in systemd","topic":"Linux"},{"categories":["knowledge-base"],"contents":"Similar to System V’s runlevels, systemd has targets. Targets are groups of units that represent different levels of operation.\nSome common targets are:\nTarget Description rescue.target Single-user mode multi-user.target Multi-user mode with CLI via console or network graphical.target Multi-user mode with GUI Useful commands List unit files of targets systemctl list-unit-files --type=target List unit files of targets matching search (wildcard is *) systemctl list-unit-files --type=target \u0026#34;{:SearchQuery:}\u0026#34; Get default target systemctl get-default Set default target systemctl set-default {:TargetName:} Switch to other target systemctl isolate {:TargetName:} ","permalink":"https://njit.io/kb/os/linux/targets-in-systemd/","summary":"Similar to System V’s runlevels, systemd has targets. Targets are groups of units that represent different levels of operation.","tags":["os","linux","systemd"],"title":"Targets in systemd","topic":"Linux"},{"categories":["knowledge-base"],"contents":"When supplied just the version number from ver command (or possibly other sources) you can identify the common name for the Windows version.\nVersion number Workstation Server 10.0 Windows 10 or Windows 11 Server 2016, Server 2019 or Server 2021 6.3 Windows 8.1 Server 2012 R2 6.2 Windows 8 Server 2012 6.1 Windows 7 Server 2008 R2 6.0 Windows Vista Server 2008 5.2 Windows XP 64-bit Server 2003 5.1 Windows XP 5.0 Windows 2000 Windows 2000 4.10 Windows 98 ","permalink":"https://njit.io/kb/os/windows/version-numbers/","summary":"If you need a quick way to determine which version of Windows something is running you can do this quick check.","tags":["os","windows"],"title":"Windows version numbers","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Tested with Ubuntu 20.04 on VMFS5 volume using vmfs-tools 0.2.5\nInstall VMFS tools\nsudo apt install vmfs-tools Identify VMFS partition\nblkid Mount the partition to your mount-point\nvmfs-fuse /dev/{:PartitionID:} \u0026#34;{:MountPoint:}\u0026#34; ","permalink":"https://njit.io/kb/virtualisation/vmware/mounting-vmfs-volume-read-only-in-ubuntu/","summary":"How to mount a VMFS volume in an Ubuntu shell.","tags":["virtualisation","vmware","esxi","ubuntu","linux"],"title":"Mounting VMFS volume (read-only) in Ubuntu","topic":"VMware"},{"categories":["knowledge-base"],"contents":"IBM/Lenovo IMM Username: USERID\nPassword: PASSW0RD\nDell iDRAC Username: root\nPassword: calvin\nHP iLO (Reset password in BIOS if needed) Username: Administrator\nPassword is different for each server and is found on service tag\nFujitsu iRMC Username: admin\nPassword: admin\nSupermicro IPMI Username: ADMIN\nPassword: ADMIN\nAcer Altos eXpress Console Username: root\nPassword: superuser\n","permalink":"https://njit.io/kb/hardware/servers/remote-management-default-creds/","summary":"Default credentials for IBM, Lenovo, Dell, HP, Fujitsu and Acer server remote management systems","tags":["server","hardware"],"title":"Server remote management default credentials","topic":"Servers"},{"categories":["knowledge-base"],"contents":"DISM is a tool that allows you to switch Windows editions and repair a broken Windows deployment.\nOnline Windows image operations Get current Windows edition DISM /Online /Get-CurrentEdition Get Windows editions you can change to DISM /Online /Get-TargetEditions Change Windows edition and update product key DISM /Online /Set-Edition:{:WindowsEdition:} /ProductKey:{:ProductKey:} /AcceptEula Lists Windows features available and their state (Enabled/Disabled) DISM /Online /Get-Features Enable Windows Feature DISM /Online /Enable-Feature /FeatureName:{:FeatureName:} Enable Windows Feature and all of its dependencies DISM /Online /Enable-Feature /All /FeatureName:{:FeatureName:} Scans the Windows image for component store corruption DISM /Online /Cleanup-image /ScanHealth Scans the Windows image for component store corruption and performs repairs DISM /Online /Cleanup-image /RestoreHealth Offline Windows image operations (personally never had much success with these) Scans an offline Windows image for component store corruption and performs repairs DISM /Image:{:DriveLetter:}: /WinDir:{:WindowsFolder:} /Cleanup-image /RestoreHealth When running offline from installation media you might need to specify a source ESD or WIM file to repair from DISM /Image:{:DriveLetter:}: /WinDir:{:WindowsFolder:} /Cleanup-image /RestoreHealth /Source:WIM:{:InstallMediaDriveLetter:}:\\sources\\install.wim:{:ImageIndex:} DISM /Image:{:DriveLetter:}: /WinDir:{:WindowsFolder:} /Cleanup-image /RestoreHealth /Source:ESD:{:InstallMediaDriveLetter:}:\\sources\\install.esd:{:ImageIndex:} To identify which index you want from the source WIM/ESD run the following DISM /Get-ImageInfo /ImageFile:{:SourceFilePath:} You can mount the image index to a folder DISM /Mount-Image /ImageFile:{:SourceFilePath:} /Index:{:ImageIndex:} /MountDir:{:MountDirectory:} /ReadOnly ","permalink":"https://njit.io/kb/os/windows/dism-cheat-sheet/","summary":"Use DISM to switch Windows editions or repair a broken Windows deployment.","tags":["os","windows"],"title":"Windows Deployment Image Servicing and Management (DISM) cheat-sheet","topic":"Windows"},{"categories":["knowledge-base"],"contents":"The follow are example commands for using slmgr.vbs which is a visual basic script provided in Windows Vista/Server 2008 (and newer) that allows you to configure Windows licensing.\nGet current key info\nslmgr.vbs /dli Get more detailed info\nslmgr.vbs /dlv Get key expiration\nslmgr.vbs /xpr Rearm trial license\nslmgr.vbs /rearm Remove key (need to clear from reg afterwards)\nslmgr.vbs /upk Clear key from registry\nslmgr.vbs /cpky Enter new key\nslmgr.vbs /ipk {:ProductKey:} Start online key activation\nslmgr.vbs /ato Get details required for offline activation: 1 – Installation ID (which will need to be provided to Microsoft in lots of 6 or 7) 2 – Activation ID (which you will need for the next command) Note: You can Ctrl + C the window to copy its contents elsewhere\nslmgr.vbs /dlv Activate Windows using the Confirmation ID provided by Microsoft\nslmgr.vbs /atp {:ConfirmationID:} {:ActivationID:} ","permalink":"https://njit.io/kb/os/windows/slmgr-vbs-cheat-sheet/","summary":"Example commands for using slmgr.vbs which is a visual basic script provided in Windows Vista/Server 2008 (and newer) that allows you to configure Windows licensing.","tags":["os","windows"],"title":"Windows Software Licensing Management Tool (slmgr.vbs) cheat-sheet","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Get list of interfaces and their state\nnetsh interface show interface Get list of interfaces with their config\nnetsh interface ip show config Set/change IP address for interface\nnetsh interface ip set address \u0026#34;{:InterfaceName:}\u0026#34; static {:IPAddress:} {:SubnetMask:} {:GatewayIP:} {:Metric:} Add DNS server for interface\nnetsh interface ipv4 add dnsserver \u0026#34;{:InterfaceName:}\u0026#34; address={:DNSServerIP:} index={:Index:} Remove DNS server from interface\nnetsh interface ipv4 delete dnsserver \u0026#34;{:InterfaceName:}\u0026#34; address={:DNSServerIP:} Set interface to DHCP\nnetsh interface ip set address \u0026#34;{:InterfaceName:}\u0026#34; dhcp ","permalink":"https://njit.io/kb/os/windows/network-config-via-netsh/","summary":"Some basic commands for modifying the IP of a network interface in Windows.","tags":["os","windows"],"title":"Configuring Windows networking via command-line with NETSH","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Print all routes\nroute print Print a specific route\nroute print {:IPAddress:} Create a new route\nroute add {:IPAddress:} mask {:SubnetMask:} {:GatewayIP:} metric {:Metric:} Modify an existing route (if created rule with above add/create command double check metric)\nroute change {:IPAddress:} mask {:SubnetMask:} {:GatewayIP:} metric {:Metric:} Delete a route (if created rule with above add/create command double check metric)\nroute delete {:IPAddress:} mask {:SubnetMask:} metric {:Metric:} Note: You can specify which interface the route uses by appending “if {:InterfaceIndex:}” with interface indexes being found at the top of the results for the “route print” command\n","permalink":"https://njit.io/kb/os/windows/network-routes-via-cli/","summary":"Some basic commands for managing network routes in Windows.","tags":["os","windows"],"title":"Network routes via Windows command-line","topic":"Windows"},{"categories":["knowledge-base"],"contents":"Get vmware version and release level vmware -vl Enable/disable maintenance mode esxcli system maintenanceMode set --enable {:MaintenanceBoolean:} Reboot/power off the vm host esxcli system shutdown reboot --reason \u0026#34;{:Reason:}\u0026#34; esxcli system shutdown poweroff --reason \u0026#34;{:Reason:}\u0026#34; List running VMs esxcli vm process list Shutdown/kill running VM esxcli vm process kill --type=soft --world-id={:WorldID:} esxcli vm process kill --type=hard --world-id={:WorldID:} esxcli vm process kill --type=force --world-id={:WorldID:} List host software esxcli software vib list List host modules esxcfg-module --list esxcli system module list esxcli system module list --enabled=true esxcli system module list --loaded=true Enable/disable host module esxcfg-module -e {:ModuleName:} esxcfg-module -d {:ModuleName:} esxcli system module set --module {:ModuleName:} --enabled={:ModEnableBoolean:} Force load module esxcli system module load --module {:ModuleName:} List all vibs esxcli software vib list Install vib software esxcli software vib install --depot \u0026#34;{:OfflineBundleZipPath:}\u0026#34; Update vib software/Update ESXi with offline bundle esxcli software vib update --depot \u0026#34;{:OfflineBundleZipPath:}\u0026#34; Uninstall vib software esxcli software vib remove --vibname={:VIBName:} List SCSI devices and some details esxcfg-scsidevs -a List storage and details esxcli storage core device list List physical NICs esxcfg-nics -l esxcli network nic list List vSwitches esxcfg-vswitch -l esxcli network vswitch standard list esxcli network vswitch dvs vmware list List vmkernel NICs esxcfg-vmknic -l esxcli network ip interface list List VMware core dumps esxcli system coredump file list Deactivate VMware core dumps esxcli system coredump file set -u Delete VMware core dump esxcli system coredump file remove -f \u0026#34;{:CoreDumpPath:}\u0026#34; ","permalink":"https://njit.io/kb/virtualisation/vmware/esxi-cli-cheat-sheet/","summary":"Cheat-sheet for useful commands you can run via the ESXi shell.","tags":["virtualisation","vmware","esxi"],"title":"VMware ESXi command-line cheat-sheet","topic":"VMware"},{"categories":["knowledge-base"],"contents":"WMIC is a command-line utility for interacting with Windows Management Instrumentation.\nGet list all of aliases\nwmic alias list brief Get BIOS serial number\nwmic bios get serialnumber Get OS name\nwmic os get name wmic PATH Win32_OperatingSystem GET name Get OS Install Date\nwmic PATH Win32_ComputerSystem GET InstallDate Get CPU name\nwmic cpu get name wmic PATH Win32_Processor get Name Get TPM information\nwmic /namespace:\\\\root\\cimv2\\security\\microsofttpm path win32_tpm get ManufacturerIdTxt,ManufacturerVersion,SpecVersion Get GPU description\nwmic PATH win32_videocontroller GET description Get HDD info\nwmic diskdrive get model,name,size wmic path win32_LogicalDisk get model,name,size Get network devices and details\nwmic nic get name,index,netenabled,physicaladapter wmic path Win32_NetworkAdapter get Name,MACAddress,NetConnectionStatus,NetEnabled,PhysicalAdapter Enable/disable NIC based on index\nwmic path win32_networkadapter where index={:Integer:} call enable wmic path win32_networkadapter where index={:Integer:} call disable Enable/disable all physical NICs\nwmic path win32_networkadapter where physicaladapter=TRUE call enable wmic path win32_networkadapter where physicaladapter=TRUE call disable Get list of printers\nwmic printer list status Get list of users and SIDs\nwmic useraccount get name,sid wmic path Win32_UserAccount get name,sid Set user passwords to not expire\nwmic path Win32_UserAccount set PasswordExpires=False wmic path Win32_UserAccount where \u0026#34;name=\u0026#39;{:Username:}\u0026#39;\u0026#34; set PasswordExpires=False wmic path Win32_UserAccount where \u0026#34;LocalAccount=TRUE\u0026#34; set PasswordExpires=False Get list of installed applications\nwmic product get name,vendor,version Uninstall an application\nwmic product where \u0026#34;name=\u0026#39;{:SoftwareName:}\u0026#39;\u0026#34; call uninstall View all services\nwmic path Win32_Service get DisplayName,Name,Status,StartMode,Started Search for service\nwmic path Win32_Service where \u0026#34;name=\u0026#39;{:ServiceName:}\u0026#39;\u0026#34; get DisplayName,Name,Status,StartMode,Started Search for all automatic services which are not currently started\nwmic path Win32_Service where (Started=FALSE and StartMode=\u0026#39;Auto\u0026#39;) get DisplayName,Name,Status,StartMode,Started Run query against another machine (RPC server must be available)\nwmic /NODE:\u0026#34;{:MachineName:}\u0026#34; wmic /NODE:\u0026#34;{:MachineName:}\u0026#34; /USER:\u0026#34;{:Domain:}\\{:Username:}\u0026#34; wmic /NODE:\u0026#34;{:MachineName:}\u0026#34; /USER:\u0026#34;{:Domain:}\\{:Username:}\u0026#34; /PASSWORD:\u0026#34;{:Password:}\u0026#34; ","permalink":"https://njit.io/kb/os/windows/wmic-examples/","summary":"Some basic commands for using WMIC to interact with Windows Management Instrumentation.","tags":["os","windows","wmi"],"title":"WMIC examples","topic":"Windows"},{"categories":null,"contents":"\tHi, I’m Nathan Jackson and I am an IT Systems Engineer based in Melbourne. During the day I work with Windows domains and Microsoft 365 tenants, at night I experiment with Linux and different programming languages.\nQualifications\rSince completing my Bachelor of Information Technology and Systems at Monash University I have gained the following certifications:.\nNutanix Certified Professional\rMicrosoft Azure Solutions Architect Expert\rMicrosoft Azure Administrator Associate\rInterests\rSome of my interests are:\nVirtualisation \u0026 Public Cloud\rWindows \u0026 Linux Server Administration\rScripting with PowerShell\r","permalink":"https://njit.io/about-me/","summary":null,"tags":null,"title":"About Me","topic":null},{"categories":["tools"],"contents":"As I can only find old versions of Iperf3 compiled for Windows which are incompatible with the latest versions compiled for Linux I have started compiling Iperf 3 for Windows myself using Cygwin.\nIf you would like to learn more about the build process check-out my KB article: How to compile Iperf3 for Windows using Cygwin\nLinks Direct download of the latest version – Iperf 3.13 x64\nDirect download of the lite version – Iperf 3.13 x64 (no auth options)\nLink to GitHub page where I am hosting the files\n","permalink":"https://njit.io/iperf-3-for-windows/","summary":"Recent Iperf3 binaries for Windows","tags":["iperf3","windows"],"title":"Iperf 3 for Windows","topic":null},{"categories":["tools"],"contents":"\rApplication data definition\rSave Cancel Reset to sample\rAbout Message Composer\rNo version number\rIf you find yourself using this seriously it has the following keyboard shortcuts when open:\nKey combination\rDescription\rCtrl + Shift + \u0026lt;\rChange page\rCtrl + Shift + \u0026gt;\rChange page\rCtrl + Shift + \u0026quest;\rSnap to page first input\rCtrl + Shift + C\rCopy current page preview\rCtrl + Shift + Z\rClear page and snap to first input\rCtrl + Shift + R\rReset app, return to first page and snap to first input\rCtrl + Shift + A\rBring up this About dialog\rCtrl + Shift + S\rBring up the Settings dialog\r","permalink":"https://njit.io/message-composer/","summary":"Define common message scripts as JSON to be able to quickly build and populate message templates","tags":null,"title":"Message Composer","topic":null},{"categories":["projects"],"contents":"This part is skippable for those of you who don\u0026rsquo;t have to interface with a PPPoE modem for their internet, but essential those who do. All the information I found on this topic was quite old, but with a small amount of trial and error I got it working in my own home.\nPlease note:\nThis part isn\u0026rsquo;t tested as well as the others. There is a lot below that depends on how your upstream provider wants you to connect to their network. If you have to do PPPoE with a VLAN then that will need to be setup first. The PPP daemon doesn\u0026rsquo;t handle VLANs so you\u0026rsquo;ll need to create a VLAN sub-interface to use as your ethernet interface below (e.g. eth0.2 for VLAN 2 via eth0). The version of Ubuntu you are running might not include the PPPoE kernel modules anymore. Here is me finding out the hard way that this happened with the Raspberry Pi build in 22.04 so you now need to install the linux-modules-extra-raspi too (backup web archive link). While the device still has access to the internet install PPPoE support\napt install pppoe As per my note 3 above, if you are doing this on a Raspberry Pi you\u0026rsquo;ll also need to run\napt install linux-modules-extra-raspi Save your credentials into /etc/ppp/chap-secrets as required\n\u0026#34;{:Username:}\u0026#34; * \u0026#34;{:Password:}\u0026#34; Create your provider /etc/ppp/peers/{:ConnectionID:}\nlinkname {:ConnectionID:} user {:Username:} plugin rp-pppoe.so noipdefault defaultroute hide-password usepeerdns lcp-echo-interval 20 lcp-echo-failure 3 noauth persist maxfail 0 mtu 1492 mru 1492 noaccomp default-asyncmap +ipv6 Please note:\nThis is just my template I have used, you may need/want to adjust some values. For a complete list of options I found this to be a useful reference https://ppp.samba.org/pppd.html The plugin name may change. I\u0026rsquo;m actually running Alpine Linux for my home router now and my line in that config is: plugin pppoe.so eth1.2 If later you get an error like \u0026ldquo;Failed to create PPPoE socket: Address family not supported by protocol\u0026rdquo; or \u0026ldquo;Couldn\u0026rsquo;t set tty to PPP discipline: Invalid argument\u0026rdquo; please see note 3 in my first lot of notes. Next create a new service by running:\nsystemctl edit --force --full pppd@.service And fill it with the following details\n[Unit] Description=pppd for %I After=network.target StartLimitIntervalSec=0 [Service] Type=forking Restart=always RestartSec=5 ExecStart=/usr/sbin/pppd call %i {:EthernetDevice:} ExecReload=/bin/kill -s HUP $MAINPID ExecStop=/bin/kill -s QUIT $MAINPID PrivateTmp=true [Install] WantedBy=multi-user.target If you need to run a script to prepare your ethernet device before calling pppd add something like the following under the [service] section\nExecStartPre=/etc/ppp/preparedevice.sh {:EthernetDevice:} As I was using a USB to Ethernet device as my second NIC so I required the following script to help in specific scenarios\n#!/bin/bash echo \u0026#34;Preparing $1\u0026#34; /sbin/ip link set mtu 1500 dev $1 /sbin/ip link set up dev $1 Once you\u0026rsquo;re all good to go enable and start the service\nsystemctl enable pppd@{:ConnectionID:} systemctl start pppd@{:ConnectionID:} To use the connection as your default gateway add this route:\nip route add 0.0.0.0/0 dev {:PPPDevice:} ","permalink":"https://njit.io/networkenjin/part-0-pppoe/","summary":"An optional rough guide for configuring PPPoE connections in Linux","tags":["networkenjin","linux","modem","pppoe"],"title":"NetworkEnjin – Part 0: PPPoE","topic":"networkenjin"},{"categories":["projects"],"contents":"To configure routing using NFTables we need to do the following:\nEnable packet forwarding Install, configure and enable NFTables Disable IPTables The configuring NFTables part can get complex quickly (I have included a base config for you to start with) but the rest of very straight forward.\nEnabling packet forwarding By default Ubuntu (like most Linux distributions) doesn’t enable packet forwarding out of the box so you’ll need to…\nCreate /etc/sysctl.d/90-nwenjin.conf with the following contents\nnet.ipv4.ip_forward = 1 Kick-in the change\nsysctl --system You can test that it has applied using this command\nsysctl net.ipv4.ip_forward Replacing IPTables with NFTables Install NFTables\napt install nftables Populate /etc/nftables.conf with our base config. I’ll give some guidance for how to add to it later but for now make sure to populate the 2 variables with the right values and use this:\n#!/usr/sbin/nft -f flush ruleset define WAN_INTERFACE = {:WANInterface:} define LAN_SUBNET = {:LANSubnet:} table inet filter { chain outgoing { type filter hook output priority 100 policy accept } chain incoming { type filter hook input priority 0 policy drop ct state established,related accept iif lo accept meta l4proto {icmp, icmpv6} accept ip saddr $LAN_SUBNET tcp dport 22 accept } chain forwarding { type filter hook forward priority 0 policy drop ip saddr $LAN_SUBNET oifname $WAN_INTERFACE accept iifname $WAN_INTERFACE ip daddr $LAN_SUBNET ct state related,established accept } } table nat { chain prerouting { type nat hook prerouting priority 0 } chain postrouting { type nat hook postrouting priority 0 } } Enable and start NFTables\nsystemctl enable nftables.service systemctl start nftables.service Create /etc/modprobe.d/nwenjin.conf with the following contents\nblacklist iptable_filter blacklist ip_tables Restart the machine for IPTables to be disabled and NFTables to be enabled.\nNetworking theory Before you expand on the above base config to create yourself a simple firewall router, you’ll first need to understand some fundamentals of how our firewall will work.\nIn Linux, IPTables and NFTables sit on top of Netfilter which is the kernel’s networking hooks. It’s a bit over-simplified but Netfilter’s packet flow looks something like this:\nGroups of hooks are referred to as tables. For the purpose of our router we have two tables. A filter table for accepting or dropping traffic and a NAT table which changes the source or destination of traffic as it moves in or out of the router.\nNow you do not put rules directly into a hook, rules are grouped together in a chain and that chain is associated with a hook. If you like, a chain can have only 1 rule.\nThe filter table in our base config has three chains:\nOutgoing: Associated with the output hook to hold the rules for packets going from our router to another device. By default this chain will accept packets if another rule does not match. Incoming: Associated with the input hook to hold the rules for packets hitting our router from another device. By default this chain will drop packets if another rule does not match. Forwarding: Associated with the forward hook to hold the rules for packets being passed by our router from one device to another device. By default this chain will drop packets if another rule does not match. The NAT table in our base config has two chains:\nPre-routing: Associated with the prerouting hook to hold the rules for doing a network translation before they go through our filter table. Post-routing: Associated with the postrouting hook to hold the rules for doing a network translation after they have gone through our filter table. It is important to note that you need rules for traffic to go in both directions. Just because you let traffic go one-way that does not guarantee that the response is allowed back the other way. As an example the base config has the following line in the incoming chain\nct state established,related accept Because the input table drops traffic by default this line allows any responses to Outgoing traffic to be accepted upon their return.\nNow to summarise (in reverse order to the above), all the components involved and how they connect to each other goes as follows:\nWe have our firewall rules Which are in chains The chains need to have some relationship with a hook (i.e input, output, forward) Those hooks make up our tables Web server example You have a web server that is behind a router which is your firewall between the internet and your local/private network. The router has the following NFTable config:\n#!/usr/sbin/nft -f flush ruleset define WAN_INTERFACE = {:WANInterface:} define LAN_SUBNET = {:LANSubnet:} define WEB_SERVER = {:WebServerPrivateIP:} table inet filter { set WEB_SERVER_PORTS { type inet_service elements = { 80, 443 } } chain outgoing { type filter hook output priority 100 policy accept } chain incoming { type filter hook input priority 0 policy drop ct state established,related accept iif lo accept meta l4proto {icmp, icmpv6} accept ip saddr $LAN_SUBNET tcp dport 22 accept } chain forwarding { type filter hook forward priority 0 policy drop ip saddr $LAN_SUBNET oifname $WAN_INTERFACE accept iifname $WAN_INTERFACE ip daddr $LAN_SUBNET ct state related,established accept ip daddr $WEB_SERVER tcp dport @WEB_SERVER_PORTS accept ip saddr $WEB_SERVER ct state related,established accept } } table nat { set WEB_SERVER_PORTS { type inet_service elements = { 80, 443 } } chain prerouting { type nat hook prerouting priority 0 iif $WAN_INTERFACE tcp dport @WEB_SERVER_PORTS dnat $WEB_SERVER } chain postrouting { type nat hook postrouting priority 0 oif $WAN_INTERFACE masquerade } } This configuration is an example of how you can allow public internet traffic to hit your private network web server. As the internet is only aware of your public IP for traffic to reach your web server on it’s private IP a few things need to happen in your router.\nPhase 1: The incoming web request 1.1 Pre-routing The traffic will reach your router with the destination being marked as your public IP. Because the public IP belongs to your router, without modification this traffic would hit the incoming chain and be processed there but we need it to be processed via our forwarding chain. To do this a rule is required to change the destination of the traffic from your public IP address to the private IP of our web server before the routing decision is made.\nThat is handled by this line in your pre-routing chain:\niif $WAN_INTERFACE tcp dport @WEB_SERVER_PORTS dnat $WEB_SERVER In plain English: When incoming traffic hits the interface $WAN_INTERFACE on the destination TCP ports @WEB_SERVER_PORTS perform a network address translation of the destination to be $WEB_SERVER.\n1.2 Filtering With the traffic destination no longer being an IP assigned to the router it will be assessed in the forwarding chain. A rule is required to say that traffic to the web server on HTTP/S ports from the internet is allowed.\nThat is handled by this line in your forwarding chain:\nip daddr $WEB_SERVER tcp dport @WEB_SERVER_PORTS accept In plain English: For traffic where the destination is $WEB_SERVER on TCP ports @WEB_SERVER_PORTS accept the packets for delivery.\n1.3 Post-routing As the packet should be on its way to the correct target there is no need for a post-routing rule.\nPhase 2: The outgoing response 2.1 Pre-routing As the packet should be on its way back to the correct target there is no need for a pre-routing rule.\n2.2 Filtering With the destination being a public IP it will be assessed in the forwarding chain. A rule is required to say that traffic from the web server is allowed back out to the internet.\nThat is handled by this line in your forwarding chain:\nip saddr $WEB_SERVER ct state related,established accept In plain English: For traffic where the source is $WEB_SERVER and the state of the packet is related or established accept the packets for delivery.\nTechnically this is not needed because the following rule also covers this, but it helps to be explicit because if you make changes down the track you might miss that this rule has multiple functions.\nip saddr $LAN_SUBNET oifname $WAN_INTERFACE accept 2.3 Post-routing\nThe traffic leaving the router will still have the source IP as the web server’s private IP. A rule should be created to change the source IP of the web traffic to have the public IP.\nThat is handled by this line in your postrouting chain:\noif $WAN_INTERFACE masquerade In plain English: When outgoing traffic leaves the interface $WAN_INTERFACE masquerade it as that interface (as in perform a network address translation of the source to be the IP of $WAN_INTERFACE).\n","permalink":"https://njit.io/networkenjin/part-1-routing/","summary":"How to install and configure basic routing in Linux using NFTables","tags":["networkenjin","linux","routing","nftables"],"title":"NetworkEnjin – Part 1: Routing with NFTables","topic":"networkenjin"},{"categories":["projects"],"contents":"Installing DNSMasq To install dnsmasq:\napt install dnsmasq You will see an error along the lines of \u0026ldquo;failed to create listening socket for port 53: Address already in use\u0026rdquo; that\u0026rsquo;s because systemd-resolved.service is running. We\u0026rsquo;ll disable that later once dnsmasq is configured.\nRename the default dnsmasq config file in case you would like to reference it later:\nmv /etc/dnsmasq.conf /etc/dnsmasq.default.conf Create a new /etc/dnsmasq.conf and simply fill it with:\nconf-dir=/etc/dnsmasq.d/,*.conf In case /etc/dnsmasq.d doesn\u0026rsquo;t exist run\nmkdir -p /etc/dnsmasq.d Configuring DNS Create /etc/dnsmasq.d/dns.conf and fill it with:\nno-resolv server={:DNSServerIP:} This will delete tell dnsmasq to ignore what the server has it\u0026rsquo;s dns directed to whatever you set {:DNSServerIP:} to be. You can specify multiple DNS servers by having multiple server lines.\nConfiguring DHCP Create /etc/dnsmasq.d/dhcp.conf and fill it with:\ndhcp-authoritative dhcp-leasefile=/opt/dnsmasq/dnsmasq.leases no-dhcp-interface={:WANInterface:} dhcp-option=option:router,{:LANIP:} dhcp-option=option:dns-server,{:LANIP:} dhcp-range={:DHCPStartIP:},{:DHCPEndIP:},8h To configure IP reservations add this line for each reservation you would like to make\ndhcp-host={:MACAddress:}, {:IPReservation:} To resolve hostnames to a domain add this\nexpand-hosts domain={:LocalDomain:} You\u0026rsquo;ll need to create the following folder for the dhcp lease file: /opt/dnsmasq\nmkdir -p /opt/dnsmasq Disabling systemd’s resolved Once you are happy with your config disable systemd’s resolved and start dnsmasq\nsystemctl stop systemd-resolved.service systemctl disable systemd-resolved.service systemctl start dnsmasq.service Optional: Reduce snooping with DNS over HTTPS Install the tools to build our HTTPS to DNS proxy\napt install git build-essential cmake libc-ares-dev libcurl4-openssl-dev libev-dev For our HTTPS to DNS proxy we are going to be using the following GitHub project: https://github.com/aarond10/https_dns_proxy\nFrom wherever you feel appropriate clone the project, compile it and copy it to /usr/bin\ngit clone https://github.com/aarond10/https_dns_proxy.git cd https_dns_proxy cmake . make sudo cp ./https_dns_proxy /usr/bin Create a systemd service to run the proxy with\nsystemctl edit --full --force https_dns_proxy.service Make the contents of that service\n[Unit] Description=HTTPS to DNS Proxy After=network.target StartLimitIntervalSec=0 [Service] Type=simple Restart=always RestartSec=3 User=nobody Group=nogroup ExecStart=/usr/bin/https_dns_proxy -a 127.0.0.1 -p 5053 -4 -b 8.8.8.8,8.8.4.4 -r \u0026#34;https://dns.google/dns-query\u0026#34; [Install] WantedBy=multi-user.target The ExecStart line is where the magic happens. It starts https_dns_proxy listening on localhost port 5053 and looks at Google\u0026rsquo;s DoH servers.\nYes I do see irony of reducing snooping by setting my DNS to use Google\u0026rsquo;s servers. That\u0026rsquo;s a personal choice I have made, you can set it to be another provider if you like. As an example if you would rather use CloudFlare as your DNS provider change the ExecStart line to be\nExecStart=/usr/bin/https_dns_proxy -a 127.0.0.1 -p 5053 -4 -b 1.1.1.1,1.0.0.1 -r \u0026#34;https://cloudflare-dns.com/dns-query\u0026#34; Once you save and exit out of the editor we\u0026rsquo;ll need to start and enable the service\nsystemctl enable https_dns_proxy.service systemctl start https_dns_proxy.service Edit /etc/dnsmasq.d/dns.conf and replace your upstream DNS servers with just\nserver=127.0.0.1#5053 Before you start testing restart dnsmasq\nsystemctl restart dnsmasq.service Updating our base firewall For DNS and DHCP to work we will need to update our firewall\u0026rsquo;s base config in /etc/nftables.conf\n#!/usr/sbin/nft -f flush ruleset define WAN_INTERFACE = {:WANInterface:} define LAN_SUBNET = {:LANSubnet:} table inet filter { set DNSMASQ_ALLOW_UDP { type inet_service elements = { 53, 67 } } set DNSMASQ_ALLOW_TCP { type inet_service elements = { 53 } } chain outgoing { type filter hook output priority 100 policy accept } chain incoming { type filter hook input priority 0 policy drop ct state established,related accept iif lo accept meta l4proto {icmp, icmpv6} accept ip saddr $LAN_SUBNET tcp dport 22 accept udp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept udp dport @DNSMASQ_ALLOW_UDP accept tcp dport @DNSMASQ_ALLOW_TCP accept } chain forwarding { type filter hook forward priority 0 policy drop ip saddr $LAN_SUBNET oifname $WAN_INTERFACE accept iifname $WAN_INTERFACE ip daddr $LAN_SUBNET ct state related,established accept } } table nat { chain prerouting { type nat hook prerouting priority 0 } chain postrouting { type nat hook postrouting priority 0 } } While what has changed here is mostly self explanatory the following line may have turned some heads.\nudp sport bootpc udp dport bootps ip saddr 0.0.0.0 ip daddr 255.255.255.255 accept Essentially this line is to accept DHCP discovery packets which occur before the device has an IP on the network.\nNow this is all we need for our router to handle DNS and DHCP.\n","permalink":"https://njit.io/networkenjin/part-2-dns-and-dhcp/","summary":"How to install DNSMasq and then configure it to handle DHCP and DNS","tags":["networkenjin","linux","dns","dhcp","dnsmasq"],"title":"NetworkEnjin – Part 2: DNS and DHCP with DNSMasq","topic":"networkenjin"},{"categories":["projects"],"contents":"A personal JS toolbox\nGitHub page // Demo site // Code examples // Documentation\nOccasionally I need to do some things in JavaScript and this is the neatest way to manage that.\nThis website uses NJTools.JS for a lot of the functionality I have written.\nIf you feel inclined to use it you can download it from Github, but really there are probably better JS utility libraries out there.\n","permalink":"https://njit.io/njtools-js/","summary":"My personal Javascript library I use in my projects.","tags":["javascript"],"title":"NJTools.JS","topic":null},{"categories":["tools"],"contents":"\rMaking up a password on the spot is difficult, especially one that you might give to a client. To avoid it ending up on a post-it note attached to a monitor you need one that is easy to remember yet also meets a basic minimum level of security. After doing this manually for years I wrote a password generator to do the work for me.\nHow about: Modern-ish Javascript is required for password generator\nCopy to clipboard Generate another\rNote: If you would like to copy the password without the symbol you can but be warned that this password generator has a maximum of {:InsertAveragePasswordCountHere:} combinations and by removing the symbol it drops that down to {:InsertBasicPasswordCountHere:} combinations.\nThe password without any symbols is hidden here\n","permalink":"https://njit.io/password-generator/","summary":"A simple password generator that tries to balance security with ease to memorise.","tags":null,"title":"Password Generator","topic":null},{"categories":["projects"],"contents":"Because sometimes you just need a little bit of Structure\nGitHub page // Demo site // Documentation\nStructure.CSS is a very simple framework for very simple websites. I wrote this for my own enjoyment and experience. I don’t really expect anyone else to use it. Honestly it’s probably for the best that they don’t as this project lacks maturity.\nThat being said though this website uses Structure.CSS as it\u0026rsquo;s base with theming on top of it.\nIf you are looking for something like this that is a little more polished PureCSS appears to be a pretty good choice.\nFor a framework that has all the bells and whistles, shout out to Foundation which is what I’ve used in the past.\nIf you want to try it out just add the following CSS file to your project:\nhttps://cdn.njit.io/web/structure-css/1_x/latest/structure.css ","permalink":"https://njit.io/structure-css/","summary":"A simple CSS framework I maintain for my personal projects.","tags":["css"],"title":"Structure.CSS","topic":null},{"categories":["tools"],"contents":"\rA quick tool that takes templates written in my {:Notation:}, generates a form for all of the variables and processes the result.\nPlease note: This tool is currently in the beta phase. There are still some bugs that need to be ironed out.\nTemplate\rWrite/paste your template here\nHello {:Username:} this is an example.\rGenerate Form\rVariables\rEnter values for your variables\nNothing yet\nApply Apply and Copy\rResult\rYour result will go here\nCopy\r","permalink":"https://njit.io/template-processor/","summary":"A simple tool for processing snippets that use my {:Notation:}.","tags":null,"title":"Template Processor","topic":null},{"categories":null,"contents":"While the bulk of the HTML, JS \u0026amp; CSS for this site was written by me (license information can be found here), I would like to express thanks to the following for their attributions.\nHugo [Link] - Hugo was used to cobble my code and content together into an easy to manage bundle.\nStudiopress [Link] - My last website was a Wordpress site that used the Magazine Pro theme by Studiopress. I liked it that much that when I decided to switch to Hugo I recreated their design.\nEdd Turtle [Link] - Building this site as a Hugo beginner, implementing client side search for Hugo seemed a little-too-hard basket for my liking. Instead of figuring it out for myself, I repurposed the code from Edd\u0026rsquo;s tutorial I have linked.\nFuse.js [Link] - A \u0026ldquo;Powerful, lightweight fuzzy-search library, with zero dependencies\u0026rdquo; from Edd\u0026rsquo;s client side search tutorial.\nIt is made available under the Apache Software License 2.0.\nMark.js [Link] - \u0026ldquo;Search term highlighting intended for every use case\u0026rdquo; from Edd\u0026rsquo;s client side search tutorial.\nIt is made available under the MIT license.\nJavaScript MD5 [Link] - Also in the little-too-hard basket was implementing MD5 in JS for this page so I used this library.\nIt is made available under the MIT license.\nNormalize.css [Link] - My Structure.css library uses Normalize.css as a base.\nIt is made available under the MIT license.\nSimple Icons [Link] - Brand logos from side-bar were sourced from this site.\nThey were made available under the Creative Commons Zero 1.0 license.\n","permalink":"https://njit.io/attributions/","summary":null,"tags":null,"title":"Website attributions","topic":null},{"categories":null,"contents":"Copyright (c) 2024 Nathan Jackson\nThe content of this website is licensed under the Creative Commons Attribution 4.0 International License.\nThe code by Nathan Jackson for this website is licensed under the MIT License detailed below at the bottom of this document.\nThis website does contain some HTML, JS and CSS by other authors. An up to date list of the the attributions for this code can be found on the Attributions page.\nMIT License Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","permalink":"https://njit.io/license/","summary":null,"tags":null,"title":"Website licenses","topic":null}]